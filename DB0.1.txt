Commandes DB : 

Table Message : 

CREATE TABLE Messages(
id SERIAL Primary KEY,
expediteur_id INT NOT NULL,
destinataire_id INT NOT NULL,
contenu TEXT,
date_envoi TIMESTAMP DEFAULT NOW(),
lu BOOLEAN DEFAULT FALSE, 
Constraint fk_envoie FOREIGN KEY(expediteur_id) REFERENCES Utilisateurs(id) ON DELETE CASCADE,
Constraint fk_recoit FOREIGN KEY(destinataire_id) REFERENCES Utilisateurs(id) ON DELETE CASCADE
)

Table Avis : 

CREATE TABLE Avis (
    id SERIAL PRIMARY KEY,
    artiste_id INT REFERENCES Utilisateurs(id) ON DELETE CASCADE,
    studio_id INT REFERENCES Studios(id) ON DELETE CASCADE,
    note INT CHECK (note >= 1 AND note <= 5),
    commentaire TEXT,
    date_creation TIMESTAMP DEFAULT NOW()
);

Table Statut + son ENUM : 

CREATE TYPE statut_réservation AS ENUM ('confirmée', 'annulée', 'modifiée');

CREATE TABLE Reservations (
    id SERIAL PRIMARY KEY,
    artiste_id INT REFERENCES Utilisateurs(id) ON DELETE CASCADE,
    studio_id INT REFERENCES Studios(id) ON DELETE CASCADE,
    date_debut TIMESTAMP,
    date_fin TIMESTAMP,
    statut statut_réservation,
    prix_total DECIMAL,
    date_reservation TIMESTAMP DEFAULT NOW()
);

Table Notifications + ENUM : 

Create TYPE type_notif as ENUM ('reservation', 'paiement', 'avis', 'administratif')

CREATE TABLE Notifications (
    id SERIAL PRIMARY KEY, 
    utilisateur_id INT NOT NULL, 
    type type_notif NOT NULL DEFAULT 'reservation',
    message TEXT,
    date_envoi TIMESTAMP DEFAULT NOW(),
    vu BOOLEAN DEFAULT FALSE,
    CONSTRAINT fk_utilisateur FOREIGN KEY (utilisateur_id) REFERENCES Utilisateurs(id) ON DELETE CASCADE
);

Table Utilisateur + ENUM :
create TYPE role_utilisateurs as ENUM ('admin', 'propriétaire', 'artiste')

CREATE TABLE Utilisateurs (
    id SERIAL PRIMARY KEY,
    nom TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    role role_utilisateurs NOT NULL DEFAULT 'artiste',
    date_inscription TIMESTAMP DEFAULT NOW(),
    verifie BOOLEAN DEFAULT FALSE,
    deux_facteur_active BOOLEAN DEFAULT FALSE
);

Table Favoris : 

CREATE TABLE Favoris (
    id SERIAL PRIMARY KEY,
    artiste_id INT REFERENCES Utilisateurs(id) ON DELETE CASCADE,
    studio_id INT REFERENCES Studios(id) ON DELETE CASCADE,
    date_ajout TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

Table Ville : 

CREATE TABLE Villes (
    code_postal INTEGER PRIMARY KEY,
    ville VARCHAR NOT NULL
);

Table studio  + ENUM :
CREATE TYPE statut_studio AS ENUM ('en attente', 'validé', 'refusé');

CREATE TABLE Studios (
    id SERIAL PRIMARY KEY,
    nom VARCHAR(255) NOT NULL,
    description TEXT,
    adresse VARCHAR(255),
    latitude FLOAT,
    longitude FLOAT,
    prix_par_heure DECIMAL(10,2) CHECK (prix_par_heure >= 0),  
    equipements JSON,
    photo_url VARCHAR(500),
    proprietaire_id SERIAL NOT NULL, 
    statut statut_studio NOT NULL DEFAULT 'en attente',  
    date_creation TIMESTAMP DEFAULT NOW(),
code_postal INTEGER,
    CONSTRAINT fk_proprietaire FOREIGN KEY (proprietaire_id) 
     REFERENCES Utilisateurs(id) ON DELETE CASCADE
CONSTRAINT fk_studios_villes FOREIGN KEY (code_postal) REFERENCES villes(code_postal)
);
