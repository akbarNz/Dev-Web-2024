-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.avis
(
    id serial NOT NULL,
    artiste_id integer,
    studio_id integer,
    note integer,
    commentaire text COLLATE pg_catalog."default",
    date_creation timestamp without time zone DEFAULT now(),
    CONSTRAINT avis_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.favoris
(
    id serial NOT NULL,
    artiste_id integer,
    studio_id integer,
    date_ajout timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT favoris_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.messages
(
    id serial NOT NULL,
    expediteur_id integer NOT NULL,
    destinataire_id integer NOT NULL,
    contenu text COLLATE pg_catalog."default",
    date_envoi timestamp without time zone DEFAULT now(),
    lu boolean DEFAULT false,
    CONSTRAINT messages_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.notifications
(
    id serial NOT NULL,
    utilisateur_id integer NOT NULL,
    type type_notif NOT NULL DEFAULT 'reservation'::type_notif,
    message text COLLATE pg_catalog."default",
    date_envoi timestamp without time zone DEFAULT now(),
    vu boolean DEFAULT false,
    CONSTRAINT notifications_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.reservations
(
    id serial NOT NULL,
    artiste_id integer,
    studio_id integer,
    date_reservation date,
    nbr_personne integer NOT NULL,
    heure_debut time without time zone,
    heure_fin time without time zone,
    statut "statut_r√©servation",
    prix_total numeric,
    CONSTRAINT reservations_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.studios
(
    id serial NOT NULL,
    nom character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    adresse character varying(255) COLLATE pg_catalog."default",
    latitude double precision,
    longitude double precision,
    prix_par_heure numeric(10, 2),
    equipements json,
    photo_url character varying(500) COLLATE pg_catalog."default",
    proprietaire_id serial NOT NULL,
    statut statut_studio NOT NULL DEFAULT 'en attente'::statut_studio,
    date_creation timestamp without time zone DEFAULT now(),
    code_postal integer,
    CONSTRAINT studios_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.utilisateurs
(
    id serial NOT NULL,
    nom text COLLATE pg_catalog."default" NOT NULL,
    email text COLLATE pg_catalog."default" NOT NULL,
    role role_utilisateurs NOT NULL DEFAULT 'artiste'::role_utilisateurs,
    date_inscription timestamp without time zone DEFAULT now(),
    verifie boolean DEFAULT false,
    deux_facteur_active boolean DEFAULT false,
    CONSTRAINT utilisateurs_pkey PRIMARY KEY (id),
    CONSTRAINT utilisateurs_email_key UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.villes
(
    code_postal integer NOT NULL,
    ville character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT villes_pkey PRIMARY KEY (code_postal)
);

ALTER TABLE IF EXISTS public.avis
    ADD CONSTRAINT avis_artiste_id_fkey FOREIGN KEY (artiste_id)
    REFERENCES public.utilisateurs (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.avis
    ADD CONSTRAINT avis_studio_id_fkey FOREIGN KEY (studio_id)
    REFERENCES public.studios (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.favoris
    ADD CONSTRAINT favoris_artiste_id_fkey FOREIGN KEY (artiste_id)
    REFERENCES public.utilisateurs (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.favoris
    ADD CONSTRAINT favoris_studio_id_fkey FOREIGN KEY (studio_id)
    REFERENCES public.studios (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.messages
    ADD CONSTRAINT fk_envoie FOREIGN KEY (expediteur_id)
    REFERENCES public.utilisateurs (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.messages
    ADD CONSTRAINT fk_recoit FOREIGN KEY (destinataire_id)
    REFERENCES public.utilisateurs (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT fk_utilisateur FOREIGN KEY (utilisateur_id)
    REFERENCES public.utilisateurs (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.reservations
    ADD CONSTRAINT reservations_artiste_id_fkey FOREIGN KEY (artiste_id)
    REFERENCES public.utilisateurs (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.reservations
    ADD CONSTRAINT reservations_studio_id_fkey FOREIGN KEY (studio_id)
    REFERENCES public.studios (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.studios
    ADD CONSTRAINT fk_proprietaire FOREIGN KEY (proprietaire_id)
    REFERENCES public.utilisateurs (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.studios
    ADD CONSTRAINT fk_studios_villes FOREIGN KEY (code_postal)
    REFERENCES public.villes (code_postal) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;
