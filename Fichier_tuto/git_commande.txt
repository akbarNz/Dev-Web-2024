### ✅ Commandes Git essentielles : Fait avec IA

# Initialiser un dépôt Git
- git init : Crée un nouveau dépôt Git local.

# Configurer Git
- git config --global user.name "TonNom" : Définit ton nom d'utilisateur global.
- git config --global user.email "ton@email.com" : Définit ton adresse e-mail globale.

# Cloner un dépôt
- git clone [URL] : Clone un dépôt distant sur ton ordinateur.

# Vérifier l'état du dépôt
- git status : Affiche les modifications en cours, les fichiers suivis/non suivis.

# Ajouter des fichiers au suivi
- git add [fichier] : Ajoute un fichier spécifique à l'index (préparation du commit).
- git add . : Ajoute tous les fichiers modifiés et nouveaux.

# Faire un commit
- git commit -m "Message" : Enregistre les changements avec un message descriptif.

# Visualiser l'historique des commits
- git log : Affiche la liste des commits.
- git log --oneline : Affiche l'historique en version compacte.

# Envoyer des changements vers un dépôt distant
- git push origin [branche] : Envoie les modifications vers la branche distante.

# Récupérer des changements d'un dépôt distant
- git pull origin [branche] : Récupère et fusionne les changements de la branche distante.

# Créer et gérer des branches
- git branch : Liste les branches locales.
- git branch [nom] : Crée une nouvelle branche.
- git checkout [branche] : Change vers une autre branche.
- git checkout -b [nom] : Crée et passe directement sur une nouvelle branche.

# Fusionner des branches
- git merge [branche] : Fusionne une branche dans l'actuelle.

# Gérer les dépôts distants
- git remote -v : Affiche les dépôts distants configurés.
- git remote add origin [URL] : Associe un dépôt distant au dépôt local.

# Annuler et corriger des changements
- git reset [fichier] : Désindexe un fichier (avant commit).
- git reset --hard : Réinitialise complètement l'état du dépôt.
- git revert [hash_commit] : Annule un commit sans altérer l'historique.

# Supprimer une branche
- git branch -d [nom] : Supprime une branche locale.
- git push origin --delete [nom] : Supprime une branche sur le dépôt distant.

# Stash (mettre des changements en attente)
- git stash : Sauvegarde temporairement les modifications non commit.
- git stash pop : Récupère les modifications du dernier stash.

# Travailler avec des tags
- git tag : Liste les tags existants.
- git tag [nom_tag] : Crée un nouveau tag.
- git push origin [nom_tag] : Envoie un tag au dépôt distant.

# Inspecter et diagnostiquer
- git diff : Compare les modifications non indexées.
- git blame [fichier] : Montre qui a modifié chaque ligne d'un fichier.
- git show [hash] : Affiche les détails d'un commit spécifique.

# Autres commandes utiles
- git fetch : Récupère les données du dépôt distant sans fusionner.
- git cherry-pick [hash] : Applique un commit spécifique à une autre branche.
- git archive : Crée une archive (ex : ZIP) du dépôt.
- git rebase : Rejoue les commits d'une branche sur une autre (réécrit l'historique).

### ✅ Commandes Git essentielles :

# Initialiser un dépôt Git
- git init : Crée un nouveau dépôt Git local.

# Configurer Git
- git config --global user.name "TonNom" : Définit ton nom d'utilisateur global.
- git config --global user.email "ton@email.com" : Définit ton adresse e-mail globale.

# Cloner un dépôt
- git clone [URL] : Clone un dépôt distant sur ton ordinateur.

# Vérifier l'état du dépôt
- git status : Affiche les modifications en cours, les fichiers suivis/non suivis.

# Ajouter des fichiers au suivi
- git add [fichier] : Ajoute un fichier spécifique à l'index (préparation du commit).
- git add . : Ajoute tous les fichiers modifiés et nouveaux.

# Faire un commit
- git commit -m "Message" : Enregistre les changements avec un message descriptif.

# Visualiser l'historique des commits
- git log : Affiche la liste des commits.
- git log --oneline : Affiche l'historique en version compacte.

# Envoyer des changements vers un dépôt distant
- git push origin [branche] : Envoie les modifications vers la branche distante.

# Récupérer des changements d'un dépôt distant
- git pull origin [branche] : Récupère et fusionne les changements de la branche distante.

# Créer et gérer des branches
- git branch : Liste les branches locales.
- git branch [nom] : Crée une nouvelle branche.
- git checkout [branche] : Change vers une autre branche.
- git checkout -b [nom] : Crée et passe directement sur une nouvelle branche.

# Fusionner des branches
- git merge [branche] : Fusionne une branche dans l'actuelle.

# Gérer les dépôts distants
- git remote -v : Affiche les dépôts distants configurés.
- git remote add origin [URL] : Associe un dépôt distant au dépôt local.

# Annuler et corriger des changements
- git reset [fichier] : Désindexe un fichier (avant commit).
- git reset --hard : Réinitialise complètement l'état du dépôt.
- git revert [hash_commit] : Annule un commit sans altérer l'historique.

# Supprimer une branche
- git branch -d [nom] : Supprime une branche locale.
- git push origin --delete [nom] : Supprime une branche sur le dépôt distant.

# Stash (mettre des changements en attente)
- git stash : Sauvegarde temporairement les modifications non commit.
- git stash pop : Récupère les modifications du dernier stash.

# Travailler avec des tags
- git tag : Liste les tags existants.
- git tag [nom_tag] : Crée un nouveau tag.
- git push origin [nom_tag] : Envoie un tag au dépôt distant.

# Inspecter et diagnostiquer
- git diff : Compare les modifications non indexées.
- git blame [fichier] : Montre qui a modifié chaque ligne d'un fichier.
- git show [hash] : Affiche les détails d'un commit spécifique.

# Autres commandes utiles
- git fetch : Récupère les données du dépôt distant sans fusionner.
- git cherry-pick [hash] : Applique un commit spécifique à une autre branche.
- git archive : Crée une archive (ex : ZIP) du dépôt.
- git rebase : Rejoue les commits d'une branche sur une autre (réécrit l'historique).

