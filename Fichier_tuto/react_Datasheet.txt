
# Datasheet complète pour un projet React.js

## 1. Structure de base d'un projet React.js

Un projet React typique utilise **Create React App (CRA)** ou **Vite** comme outil de configuration initiale.

### Arborescence typique :

```
my-app/
├── node_modules/
├── public/
│   ├── index.html
│   └── favicon.ico
└── src/
    ├── components/
    │   └── ExampleComponent.js
    ├── App.js
    ├── index.js
    └── styles.css
├── .gitignore
├── package.json
└── README.md
```

## 2. Fichiers essentiels :

### `index.js`
- Point d'entrée de l'application.
- Monte le composant principal (`App.js`) dans le DOM.

Exemple :
```javascript
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './styles.css';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
    <React.StrictMode>
        <App />
    </React.StrictMode>
);
```

### `App.js`
- Composant principal de l'application.

Exemple :
```javascript
import React from 'react';
import ExampleComponent from './components/ExampleComponent';

const App = () => {
    return (
        <div>
            <h1>Bienvenue sur mon application React</h1>
            <ExampleComponent />
        </div>
    );
};

export default App;
```

## 3. Création de composants

- **Composants fonctionnels** : Utilisent les hooks pour gérer l'état et les effets.

Exemple :
```javascript
import React, { useState, useEffect } from 'react';

const ExampleComponent = () => {
    const [count, setCount] = useState(0);

    useEffect(() => {
        console.log(`Le compteur est à : ${count}`);
    }, [count]);

    return (
        <div>
            <p>Compteur : {count}</p>
            <button onClick={() => setCount(count + 1)}>Incrémenter</button>
        </div>
    );
};

export default ExampleComponent;
```

## 4. Principaux Hooks React

- `useState` : Gestion d'un état local.
- `useEffect` : Gestion des effets secondaires (API calls, timers).
- `useContext` : Partage global d'un état entre composants.
- `useReducer` : Alternative avancée pour la gestion complexe de l'état.
- `useRef` : Références mutables sans re-render.

Exemple `useState` :
```javascript
const [value, setValue] = useState(initialValue);
```

## 5. Appels API avec `axios`

Installation :
```
npm install axios
```

Exemple d'appel GET :
```javascript
import axios from 'axios';

useEffect(() => {
    const fetchData = async () => {
        try {
            const response = await axios.get('https://api.example.com/data');
            console.log(response.data);
        } catch (error) {
            console.error('Erreur lors de la récupération des données', error);
        }
    };

    fetchData();
}, []);
```

## 6. Gestion du routage avec `react-router-dom`

Installation :
```
npm install react-router-dom
```

Exemple :
```javascript
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import HomePage from './pages/HomePage';
import AboutPage from './pages/AboutPage';

const App = () => {
    return (
        <Router>
            <Routes>
                <Route path="/" element={<HomePage />} />
                <Route path="/about" element={<AboutPage />} />
            </Routes>
        </Router>
    );
};

export default App;
```

## 7. Bonnes pratiques

- **Composants réutilisables** : Organisez-les dans `/components`.
- **Clé unique** : Chaque élément d'une liste doit avoir une clé unique.
- **Gestion d'état** : Pour les états complexes, utilisez `useReducer` ou des bibliothèques comme Redux.
- **Séparation des préoccupations** : Séparez la logique métier (services) de la logique d'affichage (UI).

## 8. Commandes utiles

- `npx create-react-app my-app` : Créer un nouveau projet React.
- `npm start` : Démarrer l'application.
- `npm run build` : Construire l'application pour la production.

